{"version":3,"file":"my-content-bar.js","sources":["components/my-content-bar/my-content-bar.vue","../../HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDoveGlhb2NoZW5neHUvcHJvamVjdC1zcGFjZS91bmkt5p2P5p6X5pil5pqWL2NvbXBvbmVudHMvbXktY29udGVudC1iYXIvbXktY29udGVudC1iYXIudnVl"],"sourcesContent":["<template>\n\t<view class=\"container\">\n\t\t<view v-if=\"showContentSkeleton\" class=\"skeleton-container\">\n\t\t\t<!-- 模拟瀑布流布局 -->\n\t\t\t<view class=\"skeleton-column\" v-for=\"i in 2\" :key=\"i\">\n\t\t\t\t<view class=\"skeleton-item\" v-for=\"j in 5\" :key=\"j\">\n\t\t\t\t\t<!-- 图片占位 -->\n\t\t\t\t\t<view class=\"skeleton-image\"></view>\n\t\t\t\t\t<!-- 文字占位 -->\n\t\t\t\t\t<view class=\"skeleton-text-line name\"></view>\n\t\t\t\t\t<view class=\"skeleton-text-line property\"></view>\n\t\t\t\t\t<view class=\"skeleton-text-line effect\"></view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t\t<!-- 加载进度条 -->\n\t\t\t<view class=\"skeleton-loading-indicator\">\n\t\t\t\t<text class=\"loading-text\">加载中 {{ loadingProgress }}%</text>\n\t\t\t\t<view class=\"loading-bar-container\">\n\t\t\t\t\t<view \n\t\t\t\t\t\tclass=\"loading-bar-progress\" \n\t\t\t\t\t\t:style=\"{ width: `${loadingProgress}%` }\">\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t\t<view class=\"visible-container\">\n\t\t\t<!-- 瀑布流列容器：v-for生成指定列数 -->\n\t\t\t<view class=\"column\" v-for=\"(col, colIndex) in columnData\" :key=\"colIndex\">\n\t\t\t\t<!-- 动态绑定ID用于高度测量 -->\n\t\t\t\t<view\n\t\t\t\tv-for=\"item in col\"\n\t\t\t\t:key=\"item.id\"\n\t\t\t\tclass=\"medicine-box\"\n\t\t\t\t@click=\"goToContent(item.name)\"\n\t\t\t\t:id=\"'box-'+item.id\"\n\t\t\t\t>\n\t\t\t\t\t<!-- 5.图片加载后更新高度 -->\n\t\t\t\t\t<image\n\t\t\t\t\t  :src=\"getMedicineImage(item.name)\"\n\t\t\t\t\t  mode=\"aspectFill\"\n\t\t\t\t\t  class=\"medicine-image\"\n\t\t\t\t\t  lazy-load=\"true\"\n\t\t\t\t\t  @load=\"e => updateItemHeight(e, item.id)\"\n\t\t\t\t\t></image>\n\t\t\t\t\t<view class=\"medicine-info\">\n\t\t\t\t\t\t<view class=\"text-container\"> \n\t\t\t\t\t\t\t<text class=\"medicine-name\">{{ item.name }}</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<view class=\"text-container\"> \n\t\t\t\t\t\t\t<text class=\"medicine-property\">性味：{{ item.flavor }}</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<view class=\"text-container\"> \n\t\t\t\t\t\t\t<text class=\"medicine-effect\">功效：{{ item.effect }}</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n      \n\t\t\t<!-- 加载指示器 -->\n\t\t\t<view v-if=\"isLoading\" class=\"loading-indicator\">加载中 {{ getLoadingProgress() }}%</view>\n\t\t\t<view v-if=\"!hasMore\" class=\"no-more-indicator\">没有更多了</view>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n  import { nameData } from '@/data/herbData.js';\n  const apiCache = {};\t// API响应缓存池（减少重复请求）\n  \n  export default {\n    data() {\n      return {\n        columnCount: 2,          // 列数\n        columnData: [[], []], \t // 确保每列都有数组容器\n        allMedicines: [],        // 所有药品数据\n        scrollViewHeight: 600,   // 滚动容器高度\n        scrollTop: 0,            // 滚动位置\n        itemHeight: 360,         // 每个项目预估高度(px)\n        visibleCount: 0,         // 可视区域内显示的项目数\n        startIndex: 0,           // 当前显示的起始索引\n        offsetTop: 0,            // 内容偏移量\n        isLoading: false,\n\t\tloadThreshold:5,\n\t\tendIndex: 0,\t\t\t // 改为普通响应式属性\n\t\tloadQueue: 0, \t\t\t // 防止递归过深\n\t\tmaxLoadQueue: 5,\t\t // 最大递归深度\n        hasMore: true,           // 是否有更多数据\n        currentPage: 1,          // 当前页码\n        pageSize: 40,            // 每页数据量\n\t\theightTimers: {},        // 存储高度计算定时器\n\t\tshowContentSkeleton: true, // 骨架屏显示状态\n\t\tloadingProgress: 0          // 加载进度百分比\n      };\n    },\n\t\n\tmounted() {\n\t// 初始加载数据\n\tthis.loadMedicines();\t// 组件挂载立即加载数据\n    this.initScrollView();\t// 初始化滚动容器尺寸\n\tconsole.log(\"药材总数:\", nameData.length);  \n    },\n\t\n    computed: {\n\t\t// 计算列表总高度\n\t\ttotalHeight() {\n\t\t\treturn this.allMedicines.length * this.itemHeight;\n\t\t},\n\n\t\t// 动态计算顶部padding\n\t\tdynamicPaddingTop() {\n\t\t\treturn Math.max(0, this.headerHeight - this.scrollOffset);\n\t\t}\n    },\n    \n    methods: {\n\t\tgoToContent(name){\n\t\t\tuni.navigateTo({\n\t\t\t\turl: `/pages/content/content?keyword=${name}&source=index`\n\t\t\t});\n\t\t},\n\t\t// 初始化滚动容器\n\t\tinitScrollView() {\n\t\t\t// 使用选择器获取实际高度\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tconst query = uni.createSelectorQuery().in(this);\n\t\t\t\tquery.select('.virtual-scroll-container').boundingClientRect(rect => {\n\t\t\t\t\tif (rect) {\n\t\t\t\t\t\tthis.scrollViewHeight = rect.height;\n\t\t\t\t\t\t// 计算可视项数量：容器高度/单项高度 + 缓冲区\n\t\t\t\t\t\tthis.visibleCount = Math.max(1, Math.ceil(this.scrollViewHeight / this.itemHeight) + 5);\n\t\t\t\t\t}\n\t\t\t\t}).exec();\n\t\t\t});\n\t\t},\n\t  \n\t\t// 计算可视区域n\t\tcalculateVisibleRange(scrollTop) {\n\t\t\tif (Date.now() - this.lastScrollTime < 100) return; // 100ms节流\n\t\t\tconst itemsPerRow = this.columnCount; // 每行项目数\n\t\t\t\n\t\t\t// 计算结束索引（基于可视行数+缓冲）\n\t\t\tconst visibleRows = Math.ceil(this.scrollViewHeight / this.itemHeight);\n\t\t\tconst visibleItemsCount = visibleRows * this.columnCount; \n\t\t\tthis.startIndex = Math.max(0, \n\t\t\t\tMath.floor(scrollTop / this.itemHeight) * itemsPerRow - 10 // 缓冲10个项目\n\t\t\t);\n\t\t\tthis.endIndex = this.allMedicines.length; // 直接渲染所有已加载数据\n\t\t\t\n\t\t\t// 确保初始化 lastStartIndex\n\t\t\tif (typeof this.lastStartIndex === 'undefined') {\n\t\t\t\tthis.lastStartIndex = this.startIndex;\n\t\t\t}\n\t\t\t\n\t\t\t// 仅当索引变化超过30个项时更新\n\t\t\tif (Math.abs(this.startIndex - this.lastStartIndex) > 30) {\n\t\t\t  this.updateVisibleItems();\n\t\t\t  this.lastStartIndex = this.startIndex;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否需要加载更多\n\t\t\tif (this.shouldLoadMore()) {\n\t\t\t  this.loadMedicines();\n\t\t\t}\n\t\t\t\n\t\t\t// 动态偏移量\n\t\t\tthis.offsetTop = this.startIndex * this.itemHeight;\n\t\t},\n      \n\t\t// 更新可见项目\n\t\tupdateVisibleItems() {\n\t\t\t// 按列清空旧数据\n\t\t\tthis.columnData.forEach(col => col.length = 0);\n\t\t\tconst safeEndIndex = Math.min(this.endIndex, this.allMedicines.length);\n\t\t\tconst visibleItems = this.allMedicines.slice(this.startIndex, safeEndIndex);\n\t\t\t   \n\t\t\t// 确保每列都是有效数组\n\t\t\tfor (let i = 0; i < this.columnCount; i++) {\n\t\t\t\tif (!Array.isArray(this.columnData[i])) {\n\t\t\t\t this.columnData[i] = []; // 安全初始化\n\t\t\t\t}\n\t\t\t\tthis.columnData[i].length = 0; // 清空列内容\n\t\t\t}\n\t\t\t   \n\t\t\t// 动态分列算法\n\t\t\tvisibleItems.forEach((item, index) => {\n\t\t\t\tconst columnIndex = index % this.columnCount;\n\t\t\t\tthis.columnData[columnIndex].push({\n\t\t\t\t\t...item,\n\t\t\t\t\tid: `item-${this.startIndex + index}`\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 动态测量项目高度\n\t\tupdateItemHeight(e, id) {\n\t\t\tclearTimeout(this.heightTimers[id]);\n\t\t\tthis.heightTimers[id] = setTimeout(() => {\n\t\t\t\tuni.createSelectorQuery()\n\t\t\t\t    .in(this)\n\t\t\t\t    .select(`#box-${id}`)\n\t\t\t\t    .boundingClientRect(rect => {\n\t\t\t\t\t// 动态调整全局项高度基准\n\t\t\t\t    if (rect && rect.height > this.itemHeight) {\n\t\t\t\t\t    this.itemHeight = rect.height;\n\t\t\t\t    }}).exec();\n\t\t\t}, 200);\n\t    },\n\t  \n        // 判断是否需要加载更多\n        shouldLoadMore() {\n\t\t\tconst remainingItems = this.allMedicines.length - this.endIndex;\n\t\t\treturn(\n\t\t\t\t!this.isLoading &&\n\t\t\t\tthis.hasMore &&\n\t\t\t\tremainingItems > 0\n\t\t\t);\n        },\n      \n        // 加载药品数据\n        async loadMedicines() {\n\t\t\tthis.showContentSkeleton = true;\n\t\t\tthis.loadingProgress = 0; // 重置进度\n\t\t\tif (this.isLoading || !this.hasMore) return;\n\t\t\tthis.loadQueue++;\n\t\t\tthis.isLoading = true;\n\t\t\t\n\t\t\ttry {\n\t\t\t    const start = (this.currentPage - 1) * this.pageSize;\n\t\t\t\t// 先检查是否还有数据可加载\n\t\t\t\tif (start >= nameData.length) {\n\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 模拟加载进度\n\t\t\t\tconst totalPages = Math.ceil(nameData.length / this.pageSize);\n\t\t\t\tlet currentProgress = 0;\n\t\t\t\t\n\t\t\t\tfor (let page = 1; page <= totalPages; page++) {\n\t\t\t\t\t// 计算实际可加载的数据量\n\t\t\t\t\tconst end = Math.min(start + this.pageSize, nameData.length);\n\t\t\t\t\tconst names = nameData.slice(start, end);\n\t\t\t\t  \n\t\t\t\t\t// 并发请求API数据\n\t\t\t\t\tconst newData = await Promise.all(names.map(async (name) => {\n\t\t\t\t\t\tconst apiData = await this.cachedRequest(name);\n\t\t\t\t\t  \n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: `${this.currentPage}-${name}`,\t// 唯一ID生成规则\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\timage: this.getMedicineImage(name),\n\t\t\t\t\t\t\tflavor: apiData?.flavor || apiData?.property || '暂无数据',\n\t\t\t\t\t\t\teffect: apiData?.effect || apiData?.function || '暂无数据'\n\t\t\t\t\t\t};\n\t\t\t\t\t}));\n\t\t\t\t\t\n\t\t\t\t\t// 合并数据（确保不重复）\n\t\t\t\t\tthis.allMedicines = [...this.allMedicines, ...newData];\n\t\t\t\t\tthis.currentPage++;\n\t\t\t\t  \n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.columnData = Array.from({ length: this.columnCount }, () => []);\n\t\t\t\t\t\t// 初始加载后强制计算可视区域\n\t\t\t\t\t\tthis.calculateVisibleRange(0); // 传入scrollTop=0\n\t\t\t\t\t\tthis.updateVisibleItems(); // 立即更新可见项\n\t\t\t\t\t});\n\t\t\t\t  \n\t\t\t\t\t// 计算总页数\n\t\t\t\t\tconst totalPages = Math.ceil(nameData.length / this.pageSize);\n\t\t\t\t  \n\t\t\t\t\t// 自动加载下一页（递归调用）\n\t\t\t\t\tif (this.allMedicines.length < nameData.length) {\n\t\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.loadMedicines();\n\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\t\tconsole.log('所有药材数据加载完成');\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"加载数据量:\", newData.length);\n\t\t\t\t\tconsole.log(\"当前总数据:\", this.allMedicines.length);\n\t\t\t\t\t// 更新进度\n\t\t\t\t\tcurrentProgress = Math.floor((this.allMedicines.length / nameData.length) * 100);\n\t\t\t\t\tthis.loadingProgress = Math.min(currentProgress, 100);\n\t\t\t\t\tawait this.delay(100); // 添加延迟使进度可见\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t    console.error('加载失败', error);\n\t\t\t\t// 添加错误处理UI反馈\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '数据加载失败',\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t  this.loadQueue--;\n\t\t\t  this.isLoading = false;\n\t\t\t  // 关闭骨架屏\n\t\t\t  setTimeout(() => {\n\t\t\t\t  this.showContentSkeleton = false;\n\t\t\t  }, 500);\n\t\t\t}\t\n        },\n\t\t\n\t\t// 简单延迟函数\n\t\tdelay(ms) {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, ms));\n\t\t},\n      \n        // 获取药材图片\n\t\tgetMedicineImage(name) {\n\t\t\tconst imagePath = `/static/herb/${name}.jpg`;\n\t\t\treturn imagePath;\n\t\t},\n\t\t\n\t    //加载性能指示器\n\t    getLoadingProgress() {\n\t\t\treturn Math.min(\n\t\t\t\tMath.floor((this.allMedicines.length / nameData.length) * 100), \n\t\t\t\t100\n\t\t\t);\n\t\t},\n\t  \n\t\t// 添加缓存请求函数\n\t\tasync cachedRequest(name) {\n\t\t\tif (apiCache[name]) return apiCache[name];\n\t\t\ttry {\n\t\t\t\t// 完整响应对象\n\t\t\t\tconst response = await uni.request({\n\t\t\t\t\turl: `http://api.zhyunxi.com/api.php?api=87&key=d51b5be2f98dd9bdf06e0bb47dea87fc&name=${encodeURIComponent(name)}`,\n\t\t\t\t\ttimeout: 10000 ,// 延长至10秒\n\t\t\t\t\tdataType: 'json', // 强制JSON解析\n\t\t\t\t});\n\t\t\t  \n\t\t\t    // 兼容两种响应结构\n\t\t\t\tconst res = response[1] ? response[1] : response; // 关键修复点\n\t\t\t  \n\t\t\t    // 增强验证逻辑\n\t\t\t\tif (!res || res.statusCode !== 200 || !res.data || res.data.code !== 0) {\n\t\t\t\t\tconsole.error(`[API异常] ${name}`, { \n\t\t\t\t\t  status: res.statusCode, \n\t\t\t\t\t  data: res.data || '无响应数据'\n\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t  \n\t\t\t    // 提取有效数据\n\t\t\t\tconst validData = Array.isArray(res.data.data) && res.data.data.length > 0 \n\t\t\t\t\t? res.data.data[0] \n\t\t\t\t\t: null;\n\t\t\t  \n\t\t\t    // 新增字段有效性验证\n\t\t\t\tif (validData) {\n\t\t\t\t    // 关键字段缺失检测\n\t\t\t\t    const isValid = validData.flavor || validData.effect || validData.property || validData.function;\n\t\t\t\t    if (!isValid) {\n\t\t\t\t\t\tconsole.warn(`[数据字段缺失] ${name}`, validData);\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t  flavor: '数据异常', \n\t\t\t\t\t\t  effect: '数据异常',\n\t\t\t\t\t\t  _rawData: validData // 保留原始数据用于调试\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tapiCache[name] = validData;\n\t\t\t\treturn validData;\n\t\t\t} catch (e) {\n\t\t\t  console.error(`[网络异常] ${name}`, e.errMsg || e);\n\t\t\t  return null;\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n\n<style>\n\t.container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tflex-grow: 1; /* 填充空间 */\n\t\twidth: 100%;\n\t\tmin-height: 100vh; \n\t\tposition: relative;\n\t}\n  \n\t.skeleton-container {\n\t  padding: 20rpx;\n\t  display: flex;\n\t  gap: 20rpx;\n\t}\n\t\n\t.skeleton-column {\n\t  flex: 1;\n\t}\n\t\n\t.skeleton-item {\n\t  margin-bottom: 30rpx;\n\t  background: #fff;\n\t  border-radius: 16rpx;\n\t  overflow: hidden;\n\t  box-shadow: 0 6rpx 18rpx rgba(0,0,0,0.08);\n\t  padding: 15rpx;\n\t}\n\t\n\t.skeleton-image {\n\t  height: 240rpx;\n\t  background: linear-gradient(to right, #f5f5f5, #e0e0e0, #f5f5f5);\n\t  background-size: 200% 100%;\n\t  animation: loadingAnimation 1.5s infinite linear;\n\t  border-radius: 8rpx;\n\t  margin-bottom: 20rpx;\n\t}\n\t\n\t.skeleton-text-line {\n\t  height: 30rpx;\n\t  background: linear-gradient(to right, #f5f5f5, #e0e0e0, #f5f5f5);\n\t  background-size: 200% 100%;\n\t  animation: loadingAnimation 1.5s infinite linear;\n\t  border-radius: 4rpx;\n\t  margin-bottom: 10rpx;\n\t}\n\t\n\t.skeleton-text-line.name {\n\t  width: 70%;\n\t  height: 40rpx;\n\t  margin-bottom: 8rpx;\n\t}\n\t\n\t.skeleton-text-line.property {\n\t  width: 50%;\n\t}\n\t\n\t.skeleton-text-line.effect {\n\t  width: 80%;\n\t}\n\t\n\t/* 加载指示器 */\n\t.skeleton-loading-indicator {\n\t  position: absolute;\n\t  bottom: 20rpx;\n\t  left: 50%;\n\t  transform: translateX(-50%);\n\t  width: 80%;\n\t  background: rgba(255, 255, 255, 0.9);\n\t  padding: 15rpx 20rpx;\n\t  border-radius: 12rpx;\n\t  box-shadow: 0 2rpx 8rpx rgba(0,0,0,0.1);\n\t  z-index: 100;\n\t}\n\t\n\t.loading-text {\n\t  font-size: 28rpx;\n\t  color: #666;\n\t  display: block;\n\t  text-align: center;\n\t  margin-bottom: 8rpx;\n\t}\n\t\n\t.loading-bar-container {\n\t  height: 10rpx;\n\t  background: #f0f0f0;\n\t  border-radius: 5rpx;\n\t  overflow: hidden;\n\t}\n\t\n\t.loading-bar-progress {\n\t  height: 100%;\n\t  background: linear-gradient(90deg, #4cd964, #34e89e);\n\t  transition: width 0.3s ease;\n\t  border-radius: 5rpx;\n\t}\n\t\n\t/* 骨架屏动画 */\n\t@keyframes loadingAnimation {\n\t  0% { background-position: 100% 50%; }\n\t  100% { background-position: 0 50%; }\n\t}\n  \n\t.virtual-scroll-container {\n\t\tposition: relative;\n\t\theight: 100%;\n\t}\n  \n\t.visible-container {\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\ttransform: translateZ(0); \t/* 开启GPU加速 */\n\t\twill-change: transform;     /* 提示浏览器提前优化 */\n\t}\n  \n\t.text-container {\n\t\tdisplay: block; /* 独占一行 */\n\t\twidth: 100%;    /* 撑满父容器宽度 */\n\t\toverflow: hidden; \n\t\ttext-overflow: ellipsis;\n\t\twhite-space: nowrap; /* 禁止换行 */\n\t}\n  \n\t.column {\n\t\tflex: 0 0 50%; /* 固定宽度50%，不再自适应 */\n\t\tmin-width: 0;\n\t\tpadding: 0 10rpx;\n\t\tbox-sizing: border-box; /* 包含padding在宽度内 */\n\t}\n  \n  .column-container {\n      display: flex;\n      width: 100%;\n    }\n\t\n\t.text-container {\n\t    display: block;\n\t    width: 100%;\n\t    text-overflow: ellipsis;\n\t\toverflow: hidden; /* 保证单行显示 */\n\t    white-space: nowrap;\n\t}\n  \n\t.medicine-box {\n\t\theight: 420rpx;\n\t\tmargin-bottom: 20rpx;\n\t\tbackground: #fff;\n\t\tborder-radius: 16rpx;\n\t\toverflow: hidden;\n\t\tbox-shadow: 0 6rpx 18rpx rgba(0,0,0,0.08);\n\t\twill-change: transform;\n\t\tcontain: strict; /* 隔离渲染影响 */\n\t}\n  \n\t.medicine-image {\n\t\twidth: 100%;\n\t\theight: 240rpx;\n\t\tbackground: linear-gradient(to right, #f6f7f8, #e9ebee, #f6f7f8);\n\t\tbackground-size: 200% 100%;\n\t}\n  \n\t.medicine-info {\n\t\tpadding: 15rpx;\n\t}\n  \n\t.medicine-name {\n\t\tdisplay: block;\n\t\tfont-size: 32rpx;\n\t\tfont-weight: bold;\n\t\tmargin-bottom: 8rpx;\n\t}\n  \n\t.medicine-property {\n\t\tfont-size: 26rpx;\n\t\tcolor: #666;\n\t}\n  \n\t.loading-indicator,\n\t.no-more-indicator {\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\ttext-align: center;\n\t\tpadding: 20rpx;\n\t\tcolor: #999;\n\t\tbackground: rgba(228, 228, 228, 0.9); /* 半透明背景 */\n\t\tz-index: 60;\n\t}\n\t\n\t.medicine-effect {\n\t\tdisplay: block;\n\t\tfont-size: 26rpx;\n\t\tcolor: #000000;\n\t\tmargin-top: 5rpx;\n\t}\n</style>\n","import Component from 'D:/xiaochengxu/project-space/uni-杏林春暖/components/my-content-bar/my-content-bar.vue'\nwx.createComponent(Component)"],"names":["apiCache","_sfc_main","uni","nameData","name","rect","scrollTop","itemsPerRow","col","safeEndIndex","visibleItems","i","item","index","columnIndex","e","id","remainingItems","start","totalPages","currentProgress","page","end","names","newData","apiData","error","ms","resolve","response","res","validData","Component"],"mappings":"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"}